#ifndef _NRF52_FIFO_H_
#define _NRF52_FIFO_H_

#include <stdint.h>
#include <stdlib.h>


#define nRF52_FIFO_VERSION   1

/* ============================================================================
 * @brief     Структура экземпляра FIFO
 * ------------------------------------------------------------------------- */
typedef struct {
    uint8_t *          p_buf;           /**< Pointer to FIFO buffer memory.                      */
    uint16_t           buf_size_mask;   /**< Read/write index mask. Also used for size checking. */
    volatile uint32_t  read_pos;        /**< Next read position in the FIFO buffer.              */
    volatile uint32_t  write_pos;       /**< Next write position in the FIFO buffer.             */
} nRF5x_FIFO_t;



uint32_t nRF5x_FIFO_length(nRF5x_FIFO_t * p_fifo);

// Макрос для вычисления длины FIFO
#define FIFO_LENGTH nRF5x_FIFO_length(p_fifo)



/* ============================================================================
 * @brief     Функция инициализации FIFO
 * ----------------------------------------------------------------------------
 * @param[out] p_fifo                        объект FIFO
 * @param[in]  p_buf                         буфер FIFO для хранения данных
 * @param[in]  buf_size                      размер буфера FIFO.
 * ----------------------------------------------------------------------------
 * @retval     NRF_SUCCESS                   Если инициализация прошла успешно
 * @retval     NRF_ERROR_NULL                Если указатель NULL
 * @retval     NRF_ERROR_INVALID_LENGTH      Если размер буфера не равен двум
 * ------------------------------------------------------------------------- */
uint32_t nRF5x_FIFO_init(nRF5x_FIFO_t * p_fifo, uint8_t * p_buf, uint16_t buf_size);



/* ============================================================================
 * @brief     Добавление элемента в буфер FIFO
 * ----------------------------------------------------------------------------
 * @param[in]  p_fifo                   указатель на буфер FIFO
 * @param[in]  byte                     байт добавляемый к буферу FIFO
 * ----------------------------------------------------------------------------
 * @retval     NRF_SUCCESS              если элемент успешно добавлен в FIFO
 * @retval     NRF_ERROR_NO_MEM         если буфер FIFO переполнен
 * ------------------------------------------------------------------------- */
uint32_t nRF5x_FIFO_put(nRF5x_FIFO_t * p_fifo, uint8_t byte);



/* ============================================================================
 * @brief     Получение элемента из буфера FIFO
 * ----------------------------------------------------------------------------
 * @param[in]  p_fifo                   указатель на буфер FIFO
 * @param[out] p_byte                   байт получаемый из буфера FIFO
 * ----------------------------------------------------------------------------
 * @retval     NRF_SUCCESS              если элемент получен
 * @retval     NRF_ERROR_NOT_FOUND      если нет элементов для получения
 * ------------------------------------------------------------------------- */
uint32_t nRF5x_FIFO_get(nRF5x_FIFO_t * p_fifo, uint8_t * p_byte);



/* ============================================================================
 * @brief     Функция для просмотра элемента в FIFO, без его получения
 * ----------------------------------------------------------------------------
 * @param[in]  p_fifo                   указатель на буфер FIFO
 * @param[in]  index                    указатель на элемент для просмотра
 * @param[out] p_byte                   просматриваемый байт из буфера FIFO
 * ----------------------------------------------------------------------------
 * @retval     NRF_SUCCESS              если элемент получен
 * @retval     NRF_ERROR_NOT_FOUND      если нет элементов для просмотра
 * ------------------------------------------------------------------------- */
uint32_t nRF5x_FIFO_peek(nRF5x_FIFO_t * p_fifo, uint16_t index, uint8_t * p_byte);



/* ============================================================================
 * @brief     Функция для очитски буфера FIFO
 * ----------------------------------------------------------------------------
 * @param[in]  p_fifo                   указатель на буфер FIFO
 * ----------------------------------------------------------------------------
 * @retval     NRF_SUCCESS              если буфер удачно очищен
 * ------------------------------------------------------------------------- */
uint32_t nRF5x_FIFO_flush(nRF5x_FIFO_t * p_fifo);



/* ============================================================================
 * @brief     Функция чтения из буфера FIFO
 * - Так же может использоватся для получения доступных байт в буфере
 * ----------------------------------------------------------------------------
 * @param[in]    p_fifo             указатель на буфер FIFO
 * @param[out]   p_byte_array       указатель на память куда считывать
 * @param[inout] p_size             размер для чтения
 * ----------------------------------------------------------------------------
 * @retval     NRF_SUCCESS          если чтение прошло успешно
 * @retval     NRF_ERROR_NULL       если был задан параметр NULL
 * @retval     NRF_ERROR_NOT_FOUND  если буфер пустой
 * ------------------------------------------------------------------------- */
uint32_t nRF5x_FIFO_read(nRF5x_FIFO_t * p_fifo, uint8_t * p_byte_array, uint32_t * p_size);



/* ============================================================================
 * @brief     Функция записи в буфер FIFO
 * - Так же может использоватся для получения доступных байт в буфере
 * ----------------------------------------------------------------------------
 * @param[in]    p_fifo             указатель на буфер FIFO
 * @param[in]    p_byte_array       указатель на данные откуда записывать
 * @param[inout] p_size             размер для записи
 * ----------------------------------------------------------------------------
 * @retval     NRF_SUCCESS          если запись прошла успешно
 * @retval     NRF_ERROR_NULL       если был задан параметр NULL
 * @retval     NRF_ERROR_NO_MEM     если буфер переполнен
 * ------------------------------------------------------------------------- */
uint32_t nRF5x_FIFO_write(nRF5x_FIFO_t * p_fifo, uint8_t const * p_byte_array, uint32_t * p_size);

#endif // _NRF52_FIFO_H_
